def generate_frames():
    cap = cv2.VideoCapture(2)  # Try accessing camera at index 2

    if not cap.isOpened():  # Fallback to index 0
        print("Camera index 2 not available. Trying index 0.")
        cap = cv2.VideoCapture(0)

    if not cap.isOpened():  # If still not available, exit
        print("Error: No accessible camera found.")
        return

    while True:
        ret, frame = cap.read()
        if not ret or frame is None:
            print("Error: Unable to capture video frame.")
            break

        # Detect Faces
        face_locations, face_names = sfr.detect_known_faces(frame)
        for face_loc, name in zip(face_locations, face_names):
            y1, x2, y2, x1 = face_loc[0], face_loc[1], face_loc[2], face_loc[3]
            # Annotate frame
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 200), 2)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 200), 4)

        # Encode frame to JPEG
        ret, jpeg = cv2.imencode('.jpg', frame)
        if not ret:
            print("Error: Failed to encode frame.")
            continue

        # Send to browser
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')

    cap.release()


<!doctype html>
<html>
<head>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="css/bootstrap.min.css">
<style>
    h2 {
        text-align: center;
        margin-bottom: 5%; /* Add some margin to the top */
        font-family: 'Bahnschrift';
        font-size: 50pt;
        text-transform: uppercase;
    }
    .container {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center horizontally */
        margin-top: 20px; /* Add some margin to the top */
    }
 

    .whole{
        margin-top: 2%;
    }
   /* Remove default link styles */
    .logout-link {
        text-decoration: none; /* Removes the underline */
        color: inherit; /* Inherits the text color from the button */
        display: inline-block; /* Ensures the link behaves like a block element if needed */
        width: 100px; 
        height: 10px;
    }
        /* Style for the logout link inside the button */
    /* Position the button in the upper-right corner */
    button {
        position: fixed;  /* Fixes the button's position relative to the viewport */
        top: 20px;        /* Positions the button 10px from the top */
        right: 20px;      /* Positions the button 10px from the right */
        background-color: darkblue; /* Optional: Add a background color to the button */
        color: white;     /* Optional: Button text color */
        border: none;     /* Optional: Remove border */
        padding: 10px 20px; /* Optional: Add padding for a larger button */
        font-weight:bold;
        font-size: 16px;   /* Optional: Adjust font size */
        font-family: Tw Cen MT;
        cursor: pointer;  /* Makes the cursor a pointer on hover */
    }

    /* Optional: Add hover effect */
    button:hover {
        background-color: #0056b3; /* Darker shade of blue on hover */
    }


    /* Ensure the parent container has enough width */
    .whole {
        width: 100%; /* Ensures the whole container spans the full width of the screen */
        padding: 20px; /* Optional: Adds space around the content */
        box-sizing: border-box;
        align-items: center;
    }

    .container {
        display: flex;
        flex-direction: row;
        align-items: flex-start;  /* Aligns both items at the top */
        justify-content: flex-start;  /* Aligns items to the left */
        gap: 14%;  /* Space between the image and the logs section */
        width: 100%;  /* Ensures container takes full width of its parent */
        flex-wrap: nowrap;  /* Prevents wrapping */
    }

    .container img {
        width: 500px;  /* Image size */
        height: 300px;  /* Image size */
        object-fit: cover;  /* Ensures image scales correctly */
    }

    .container div {
        display: flex;  /* Makes this a flex container */
        flex-direction: column;  /* Stacks the logs vertically */
        max-width: 500px;  /* Optional: Limits the width of the logs section */
        flex-grow: 1;  /* Allows the logs section to grow and take remaining space */
        word-wrap: break-word;  /* Prevents text overflow */
    }

</style>
    <title>Dashboard</title>
</head>
<body>
    <div class="whole">
    <button><a href="{{ url_for('auth.logout') }}" class="logout-link">LOGOUT</a></button>
    <h2>Welcome, {{ username }} </h2>
   
    <div class="container">
        <img src="{{ url_for('static', filename=profile_picture) }}" alt="Profile Picture">
        <div>
            <h3>Attendance Logs</h3>
            <ul>
                {% for log in logs %}
                    <li>{{ log }}</li>
                {% endfor %}
            </ul>
        </div>
    </div>
    
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="js/bootstrap.bundle.min.js"></script>
<script src="js/jquery-3.7.1.min.js"></script>
</html>
