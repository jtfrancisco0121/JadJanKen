def generate_frames():
    cap = cv2.VideoCapture(2)  # Try accessing camera at index 2

    if not cap.isOpened():  # Fallback to index 0
        print("Camera index 2 not available. Trying index 0.")
        cap = cv2.VideoCapture(0)

    if not cap.isOpened():  # If still not available, exit
        print("Error: No accessible camera found.")
        return

    while True:
        ret, frame = cap.read()
        if not ret or frame is None:
            print("Error: Unable to capture video frame.")
            break

        # Detect Faces
        face_locations, face_names = sfr.detect_known_faces(frame)
        for face_loc, name in zip(face_locations, face_names):
            y1, x2, y2, x1 = face_loc[0], face_loc[1], face_loc[2], face_loc[3]
            # Annotate frame
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 200), 2)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 200), 4)

        # Encode frame to JPEG
        ret, jpeg = cv2.imencode('.jpg', frame)
        if not ret:
            print("Error: Failed to encode frame.")
            continue

        # Send to browser
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')

    cap.release()



def generate_frames():
    cap = cv2.VideoCapture(2)  # Try accessing camera at index 2

    if not cap.isOpened():  # Fallback to index 0
        print("Camera index 2 not available. Trying index 0.")
        cap = cv2.VideoCapture(0)

    if not cap.isOpened():  # If still not available, exit
        print("Error: No accessible camera found.")
        return

    while True:
        ret, frame = cap.read()
        if not ret or frame is None:
            print("Error: Unable to capture video frame.")
            break

        # Detect Faces
        face_locations, face_names = sfr.detect_known_faces(frame)
        for face_loc, name in zip(face_locations, face_names):
            y1, x2, y2, x1 = face_loc[0], face_loc[1], face_loc[2], face_loc[3]
            # Annotate frame
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0, 0, 200), 2)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 200), 4)

            # Log attendance
            for user in users.values():  # Loop through all users in the dictionary
                if user['username'] == name:  # Check if the username matches the detected name
                    current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
                    user['logs'].append(current_time)  # Append the timestamp to the logs
                    print(f"Attendance logged for {name}: {current_time}")
                    break


        # Encode frame to JPEG
        ret, jpeg = cv2.imencode('.jpg', frame)
        if not ret:
            print("Error: Failed to encode frame.")
            continue

        # Send to browser
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')

    cap.release()